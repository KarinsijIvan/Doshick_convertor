import config
import telebot
import requests
from bs4 import BeautifulSoup
from datetime import datetime
from fake_useragent import UserAgent
from pycbrf.toolbox import ExchangeRates

bot = telebot.TeleBot(config.token)

red_doshick_70g = ["https://yarcheplus.ru/product/lapsha-4416", "–∫—Ä–∞—Å–Ω—ã–π –¥–æ—à–∏–∫ 70–≥"]
red_doshick_90g = ["https://yarcheplus.ru/product/lapsha-5324", "–∫—Ä–∞—Å–Ω—ã–π –¥–æ—à–∏–∫ 90–≥"]

green_doshick_70g = ["https://yarcheplus.ru/product/lapsha-4033", "–∑–µ–ª—ë–Ω—ã–π –¥–æ—à–∏–∫ 70–≥"]
green_doshick_90g = ["https://yarcheplus.ru/product/lapsha-4116", "–∑–µ–ª—ë–Ω—ã–π –¥–æ—à–∏–∫ 90–≥"]

chicken_rolton_60g = ["https://yarcheplus.ru/product/vermishel-4174", "–∫—É—Ä–∏–Ω—ã–π —Ä–æ–ª—Ç–æ–Ω 60–≥"]
chicken_rolton_85g = ["https://yarcheplus.ru/product/lapsha-6707", "–∫—É—Ä–∏–Ω—ã–π —Ä–æ–ª—Ç–æ–Ω 85–≥"]
chicken_rolton_90g = ["https://yarcheplus.ru/product/lapsha-4404", "–∫—É—Ä–∏–Ω—ã–π —Ä–æ–ª—Ç–æ–Ω 90–≥"]

beef_rolton_60g = ["https://yarcheplus.ru/product/vermishel-3581", "–≥–æ–≤—è–∂–∏–π —Ä–æ–ª—Ç–æ–Ω 60–≥"]
beef_rolton_85g = ["https://yarcheplus.ru/product/vermishel-6734", "–≥–æ–≤—è–∂–∏–π —Ä–æ–ª—Ç–æ–Ω 85–≥"]
beef_rolton_90g = ["https://yarcheplus.ru/product/lapsha-3940", "–≥–æ–≤—è–∂–∏–π —Ä–æ–ª—Ç–æ–Ω 90–≥"]

mushroom_rolton_60g = ["https://yarcheplus.ru/product/vermishel-3779", "–≥—Ä–∏–±–Ω–æ–π —Ä–æ–ª—Ç–æ–Ω 60–≥"]

bacon_and_cheese_rolton_60g = ["https://yarcheplus.ru/product/vermishel-5300", "—Ä–æ–ª—Ç–æ–Ω —Å –±–µ–∫–æ–Ω–æ–º –∏ —Å—ã—Ä–æ–º 60–≥"]

link_list = [red_doshick_70g, red_doshick_90g,
             green_doshick_70g, green_doshick_90g,
             chicken_rolton_60g, chicken_rolton_85g, chicken_rolton_90g,
             beef_rolton_60g, beef_rolton_85g, beef_rolton_90g,
             mushroom_rolton_60g,
             bacon_and_cheese_rolton_60g]


@bot.message_handler(commands=["convert"])
def convert(message):
    bot.send_message(message.chat.id, "–ö–∞–∫—É—é –≤–∞–ª—é—Ç—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –¥–æ—à–∏—Ä–∞–∫–∏?\n"
                                      "–í—ã–±–µ—Ä–µ—Ç–µ –æ–¥–Ω—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö")

    bot.send_message(message.chat.id, "–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã:\n"
                                      "RUBüá∑üá∫\n"
                                      "BYNüáßüáæ\n"
                                      "USDüá∫üá∏\n"
                                      "EURüá™üá∫\n"
                                      "KZTüá∞üáø\n"
                                      "CNYüá®üá≥\n"
                                      "UAHüá∫üá¶\n"
                                      "JPYüáØüáµ")

    bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ  —Ñ–æ—Ä–º–∞—Ç–µ: \"—Å—É–º–º–∞ –≤–∞–ª—é—Ç–∞\"")

    bot.register_next_step_handler(message, covert_miney_to_doshick)


def covert_miney_to_doshick(message):
    date = datetime.now().date()
    money, currency = message.text.split()
    money = float(money)
    rates = ExchangeRates(date)
    sells_and_quantity = {}

    bot.send_message(message.chat.id, f"–∑–∞ {message.text} –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å")
    for i in link_list:
        sell = get_sell(i[0])

        if currency != "RUB":
            quantity_doshick = int(float(rates[currency].rate) * money / sell)
        else:
            quantity_doshick = int(money / sell)

        change = round(money - quantity_doshick*sell, ndigits=2)
        sells_and_quantity.update({i[1]: [quantity_doshick, sell]})

        bot.send_message(message.chat.id, f"{quantity_doshick} {i[1]} –∑–∞ {sell}, {change} –æ—Å—Ç–∞–Ω–µ—Ç—Å—è")

    benefit = max_benefit(sells_and_quantity)
    bot.send_message(message.chat.id, f"–í—ã–≥–æ–¥–Ω–µ–µ –≤—Å–µ–≥–æ –∫—É–ø–∏—Ç—å {benefit[0]}, —Ç.–∫. –í—ã –ø–æ–ª—É—á–∏—Ç–µ {benefit[1]}–≥")

    return quantity_doshick


def get_sell(link):
    headers = {"User-Agent": UserAgent().random}

    full_page = requests.get(link, headers=headers)
    soup = BeautifulSoup(full_page.content, "html.parser")

    sell = soup.findAll("div", {"class": "aJThHsRzJ hsLgGFlow bJThHsRzJ tJThHsRzJ BJThHsRzJ"})
    sell = sell[0].text

    return sell_to_float(sell)


def sell_to_float(sell):
    sell = sell.split()[0]
    sell = sell.split(",")
    sell = float(".".join(sell))

    return sell


def max_benefit(lst):
    all_quantity = {}
    for i in lst:
        weight = int(i.split()[-1].rstrip("–≥"))
        quantity = weight * lst[i][0]
        all_quantity.update({quantity: i})

    max_quantity = [all_quantity[max(list(all_quantity))], max(list(all_quantity))]

    print(max_quantity)
    return max_quantity


bot.polling(none_stop=True)
